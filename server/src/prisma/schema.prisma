// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String           @db.VarChar(255)
  price       Float
  imageUrl    String           @db.VarChar(255)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  categoryId  Int?
  orderItems  OrderItem[]      // Relation to OrderItem
  category    Category?        @relation(fields: [categoryId], references: [id])
  vendorId    Int?             // Relation to Vendor
  vendor      Vendor?          @relation(fields: [vendorId], references: [id])
  reviews     ProductReview[]  // Relation to ProductReview
  wishlists   Wishlist[]       // Relation to Wishlist

  @@index([name])
  @@index([categoryId, price], map: "idx_category_price")
  @@index([categoryId], map: "idx_categoryid")
  @@index([createdAt], map: "idx_createdat")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  deletedAt   DateTime?
  products    Product[] // Relation to Product

  @@index([name])
}

model Vendor {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  phone     String?   @db.VarChar(20)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]   // Relation to Order
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id]) // One-to-one relation to User
  products  Product[] // Relation to Product
  stores    Store[]   // Relation to Store

  @@index([email])
}

model Store {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(100)
  description String
  logo        String          @db.VarChar(255)
  sellerId    Int
  seller      Vendor          @relation(fields: [sellerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  reviews     StoreReview[]   // Relation to StoreReview

  @@index([name])
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id]) // Relation to Product
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id]) // Relation to Customer
  rating     Float    // e.g., 1.0 to 5.0
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}

model StoreReview {
  id         Int      @id @default(autoincrement())
  storeId    Int
  store      Store    @relation(fields: [storeId], references: [id]) // Relation to Store
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id]) // Relation to Customer
  rating     Float    // e.g., 1.0 to 5.0
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Wishlist {
  id         Int       @id @default(autoincrement())
  customerId Int       // Relation to Customer
  customer   Customer  @relation(fields: [customerId], references: [id])
  productId  Int       // Relation to Product
  product    Product   @relation(fields: [productId], references: [id])
  createdAt  DateTime  @default(now())

  @@unique([customerId, productId], name: "unique_customer_product")
}

model Order {
  id              Int         @id @default(autoincrement())
  customerName    String
  customerEmail   String
  shippingAddress String
  totalAmount     Float
  items           OrderItem[] @relation("OrderItems")
  customer        Customer    @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId      Int
  vendor          Vendor?     @relation(fields: [vendorId], references: [id])
  vendorId        Int?        // Nullable relation field for Vendor

  @@index([customerId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  productId Int
  orderId   Int
  order     Order   @relation("OrderItems", fields: [orderId], references: [id]) // Relation to Order
  product   Product @relation(fields: [productId], references: [id]) // Relation to Product

  @@index([productId, orderId])
}

model Customer {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(100)
  email        String           @unique @db.VarChar(255)
  passwordHash String           @db.VarChar(255)
  phoneNumber  String?          @db.VarChar(20)
  address      String?          @db.VarChar(255)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
  userId       Int              @unique
  user         User             @relation("UserCustomer", fields: [userId], references: [id])
  orders       Order[]          @relation("CustomerOrders")
  productReviews ProductReview[] // Relation to ProductReview
  storeReviews   StoreReview[]   // Relation to StoreReview
  wishlists    Wishlist[]       // Relation to Wishlist

  @@index([email])
  @@index([phoneNumber])
}

model User {
  id                   Int        @id @default(autoincrement())
  name                 String     @db.VarChar(100)
  email                String     @unique @db.VarChar(255)
  password             String     @db.VarChar(255)
  role                 Role       @default(CUSTOMER)
  status               UserStatus @default(ACTIVE)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime?
  vendorId             Int?
  customer             Customer?  @relation("UserCustomer") // Relation to Customer
  vendor               Vendor?    @relation // Relation to Vendor
  resetTokenExpiration DateTime?
  resetToken           String?
  tokenExpiry          DateTime?

  @@index([email])
}
model Setting {
  id         Int    @id @default(autoincrement())
  key        String @unique
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
